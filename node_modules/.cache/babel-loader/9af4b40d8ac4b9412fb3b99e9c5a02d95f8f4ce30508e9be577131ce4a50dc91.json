{"ast":null,"code":"const express = require(\"express\");\nconst multer = require(\"multer\");\nconst path = require(\"path\");\nconst fs = require(\"fs\");\nconst Blog = require(\"../models/Blog\");\nconst User = require(\"../models/User\");\nconst auth = require(\"../middleware/authMiddleware\");\nconst router = express.Router();\n\n// Configure multer for image upload\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, \"uploads/\");\n  },\n  filename: (req, file, cb) => {\n    const ext = path.extname(file.originalname);\n    cb(null, Date.now() + ext);\n  }\n});\nconst upload = multer({\n  storage\n});\n\n/**\r\n * CREATE Blog\r\n */\nrouter.post(\"/\", auth, upload.single(\"image\"), async (req, res) => {\n  try {\n    const {\n      title,\n      content,\n      category\n    } = req.body;\n    const imagePath = req.file ? `/uploads/${req.file.filename}` : \"\";\n    const blog = new Blog({\n      title,\n      content,\n      category,\n      image: imagePath,\n      author: req.user.id\n    });\n    await blog.save();\n    res.status(201).json(blog);\n  } catch (err) {\n    console.error(\"Blog creation failed:\", err);\n    res.status(500).json({\n      message: \"Blog creation failed\"\n    });\n  }\n});\n\n/**\r\n * GET All Blogs (with author populated)\r\n */\nrouter.get(\"/\", async (req, res) => {\n  try {\n    const blogs = await Blog.find().populate(\"author\", \"name email\");\n    res.json(blogs);\n  } catch (err) {\n    res.status(500).json({\n      message: \"Failed to fetch blogs\"\n    });\n  }\n});\n\n/**\r\n * GET Blog by ID\r\n */\nrouter.get(\"/:id\", auth, async (req, res) => {\n  try {\n    const blog = await Blog.findById(req.params.id).populate(\"author\", \"name email\");\n    const userId = req.user.id;\n    if (!blog) return res.status(404).json({\n      message: \"Blog not found\"\n    });\n    res.json({\n      blog,\n      userId\n    });\n  } catch (err) {\n    res.status(500).json({\n      message: \"Error fetching blog\"\n    });\n  }\n});\n\n/**\r\n * UPDATE Blog - Only author can update\r\n */\nrouter.put(\"/:id\", auth, upload.single(\"image\"), async (req, res) => {\n  try {\n    const blog = await Blog.findById(req.params.id);\n    if (!blog) return res.status(404).json({\n      message: \"Blog not found\"\n    });\n    if (blog.author.toString() !== req.user.id) {\n      return res.status(403).json({\n        message: \"Not authorized to update this blog\"\n      });\n    }\n    blog.title = req.body.title;\n    blog.content = req.body.content;\n    blog.category = req.body.category;\n    if (req.file) {\n      blog.image = `/uploads/${req.file.filename}`;\n    }\n    await blog.save();\n    res.json(blog);\n  } catch (err) {\n    console.error(\"Error updating blog:\", err);\n    res.status(500).json({\n      message: \"Failed to update blog\"\n    });\n  }\n});\n\n/**\r\n * DELETE Blog - Only author can delete, and delete image file from disk\r\n */\nrouter.delete(\"/:id\", auth, async (req, res) => {\n  try {\n    const blog = await Blog.findById(req.params.id);\n    if (!blog) return res.status(404).json({\n      message: \"Blog not found\"\n    });\n    if (blog.author.toString() !== req.user.id) {\n      return res.status(403).json({\n        message: \"Not authorized to delete this blog\"\n      });\n    }\n\n    // Delete image from disk if exists\n    if (blog.image) {\n      const imagePath = path.join(__dirname, \"..\", blog.image);\n      if (fs.existsSync(imagePath)) {\n        fs.unlinkSync(imagePath);\n      }\n    }\n    await blog.deleteOne();\n    res.json({\n      message: \"Blog and image deleted successfully\"\n    });\n  } catch (err) {\n    console.error(\"Error deleting blog:\", err);\n    res.status(500).json({\n      message: \"Failed to delete blog\"\n    });\n  }\n});\n\n/**\r\n * POST Comment\r\n */\nrouter.post(\"/:id/comments\", auth, async (req, res) => {\n  try {\n    const blog = await Blog.findById(req.params.id);\n    if (!blog) return res.status(404).json({\n      message: \"Blog not found\"\n    });\n    const user = await User.findById(req.user.id);\n    const comment = {\n      name: user.name,\n      text: req.body.text\n    };\n    blog.comments.push(comment);\n    await blog.save();\n    res.status(201).json(comment);\n  } catch (err) {\n    res.status(500).json({\n      message: \"Failed to post comment\"\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","multer","path","fs","Blog","User","auth","router","Router","storage","diskStorage","destination","req","file","cb","filename","ext","extname","originalname","Date","now","upload","post","single","res","title","content","category","body","imagePath","blog","image","author","user","id","save","status","json","err","console","error","message","get","blogs","find","populate","findById","params","userId","put","toString","delete","join","__dirname","existsSync","unlinkSync","deleteOne","comment","name","text","comments","push","module","exports"],"sources":["C:/Users/SOWMITH.BIYYALA/edublog4/frontend/src/pages/EditBlog.js"],"sourcesContent":["const express = require(\"express\");\r\nconst multer = require(\"multer\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst Blog = require(\"../models/Blog\");\r\nconst User = require(\"../models/User\");\r\nconst auth = require(\"../middleware/authMiddleware\");\r\n\r\nconst router = express.Router();\r\n\r\n// Configure multer for image upload\r\nconst storage = multer.diskStorage({\r\n  destination: (req, file, cb) => {\r\n    cb(null, \"uploads/\");\r\n  },\r\n  filename: (req, file, cb) => {\r\n    const ext = path.extname(file.originalname);\r\n    cb(null, Date.now() + ext);\r\n  },\r\n});\r\nconst upload = multer({ storage });\r\n\r\n/**\r\n * CREATE Blog\r\n */\r\nrouter.post(\"/\", auth, upload.single(\"image\"), async (req, res) => {\r\n  try {\r\n    const { title, content, category } = req.body;\r\n    const imagePath = req.file ? `/uploads/${req.file.filename}` : \"\";\r\n\r\n    const blog = new Blog({\r\n      title,\r\n      content,\r\n      category,\r\n      image: imagePath,\r\n      author: req.user.id,\r\n    });\r\n\r\n    await blog.save();\r\n    res.status(201).json(blog);\r\n  } catch (err) {\r\n    console.error(\"Blog creation failed:\", err);\r\n    res.status(500).json({ message: \"Blog creation failed\" });\r\n  }\r\n});\r\n\r\n/**\r\n * GET All Blogs (with author populated)\r\n */\r\nrouter.get(\"/\", async (req, res) => {\r\n  try {\r\n    const blogs = await Blog.find().populate(\"author\", \"name email\");\r\n    res.json(blogs);\r\n  } catch (err) {\r\n    res.status(500).json({ message: \"Failed to fetch blogs\" });\r\n  }\r\n});\r\n\r\n/**\r\n * GET Blog by ID\r\n */\r\nrouter.get(\"/:id\", auth, async (req, res) => {\r\n  try {\r\n    const blog = await Blog.findById(req.params.id).populate(\"author\", \"name email\");\r\n    const userId = req.user.id;\r\n    if (!blog) return res.status(404).json({ message: \"Blog not found\" });\r\n    res.json({ blog, userId });\r\n  } catch (err) {\r\n    res.status(500).json({ message: \"Error fetching blog\" });\r\n  }\r\n});\r\n\r\n/**\r\n * UPDATE Blog - Only author can update\r\n */\r\nrouter.put(\"/:id\", auth, upload.single(\"image\"), async (req, res) => {\r\n  try {\r\n    const blog = await Blog.findById(req.params.id);\r\n    if (!blog) return res.status(404).json({ message: \"Blog not found\" });\r\n\r\n    if (blog.author.toString() !== req.user.id) {\r\n      return res.status(403).json({ message: \"Not authorized to update this blog\" });\r\n    }\r\n\r\n    blog.title = req.body.title;\r\n    blog.content = req.body.content;\r\n    blog.category = req.body.category;\r\n\r\n    if (req.file) {\r\n      blog.image = `/uploads/${req.file.filename}`;\r\n    }\r\n\r\n    await blog.save();\r\n    res.json(blog);\r\n  } catch (err) {\r\n    console.error(\"Error updating blog:\", err);\r\n    res.status(500).json({ message: \"Failed to update blog\" });\r\n  }\r\n});\r\n\r\n/**\r\n * DELETE Blog - Only author can delete, and delete image file from disk\r\n */\r\nrouter.delete(\"/:id\", auth, async (req, res) => {\r\n  try {\r\n    const blog = await Blog.findById(req.params.id);\r\n    if (!blog) return res.status(404).json({ message: \"Blog not found\" });\r\n\r\n    if (blog.author.toString() !== req.user.id) {\r\n      return res.status(403).json({ message: \"Not authorized to delete this blog\" });\r\n    }\r\n\r\n    // Delete image from disk if exists\r\n    if (blog.image) {\r\n      const imagePath = path.join(__dirname, \"..\", blog.image);\r\n      if (fs.existsSync(imagePath)) {\r\n        fs.unlinkSync(imagePath);\r\n      }\r\n    }\r\n\r\n    await blog.deleteOne();\r\n    res.json({ message: \"Blog and image deleted successfully\" });\r\n  } catch (err) {\r\n    console.error(\"Error deleting blog:\", err);\r\n    res.status(500).json({ message: \"Failed to delete blog\" });\r\n  }\r\n});\r\n\r\n/**\r\n * POST Comment\r\n */\r\nrouter.post(\"/:id/comments\", auth, async (req, res) => {\r\n  try {\r\n    const blog = await Blog.findById(req.params.id);\r\n    if (!blog) return res.status(404).json({ message: \"Blog not found\" });\r\n\r\n    const user = await User.findById(req.user.id);\r\n    const comment = { name: user.name, text: req.body.text };\r\n    blog.comments.push(comment);\r\n    await blog.save();\r\n    res.status(201).json(comment);\r\n  } catch (err) {\r\n    res.status(500).json({ message: \"Failed to post comment\" });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}